require("dotenv").config();
const { ethers } = require("ethers");

// L·∫•y danh s√°ch API Keys t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
const INFURA_KEYS = process.env.INFURA_KEYS.split(",");
const MYST_CONTRACT = "0x1379E8886A944d2D9d440b3d88DF536Aea08d9F3";
const PRIVATE_KEY = process.env.PRIVATE_KEY;

// Ch·ªçn API Key ng·∫´u nhi√™n t·ª´ danh s√°ch
function getRandomApiKey() {
    return INFURA_KEYS[Math.floor(Math.random() * INFURA_KEYS.length)];
}

// T·∫°o provider t·ª´ API Key
function createProvider(apiKey) {
    return new ethers.JsonRpcProvider(`https://polygon-mainnet.infura.io/v3/${apiKey}`);
}

// Ki·ªÉm tra API Key c√≥ b·ªã rate limit kh√¥ng
async function checkApiKey(apiKey) {
    const provider = createProvider(apiKey);
    try {
        await provider.getBlockNumber();
        return provider; // API Key ho·∫°t ƒë·ªông t·ªët
    } catch (error) {
        console.warn(`üö® API Key ${apiKey} b·ªã l·ªói ho·∫∑c rate limit.`);
        return null; // API Key b·ªã l·ªói
    }
}

// Ch·ªçn API Key h·ª£p l·ªá
async function getValidProvider() {
    for (let i = 0; i < INFURA_KEYS.length; i++) {
        const apiKey = getRandomApiKey();
        const provider = await checkApiKey(apiKey);
        if (provider) {
            console.log(`‚úÖ D√πng API Key: ${apiKey}`);
            return provider;
        }
    }
    throw new Error("‚ùå Kh√¥ng c√≥ API Key n√†o ho·∫°t ƒë·ªông!");
}

// H√†m l·∫•y gi√° gas ƒë·ªông t·ª´ m·∫°ng
async function getGasFees(provider) {
    const feeData = await provider.getFeeData();

    let baseFee = feeData.gasPrice || ethers.parseUnits("50", "gwei"); // Fallback 50 Gwei
    baseFee = ethers.toBigInt(baseFee);

    const maxFeePerGas = baseFee * BigInt(2);
    const maxPriorityFeePerGas = baseFee * BigInt(3) / BigInt(2);

    console.log(`‚õΩ Gi√° gas: ${ethers.formatUnits(baseFee, "gwei")} Gwei`);
    return { maxFeePerGas, maxPriorityFeePerGas };
}

// H√†m g·ª≠i MYST
async function sendMyst(toAddress, amount) {
    try {
        const provider = await getValidProvider();
        const wallet = new ethers.Wallet(PRIVATE_KEY, provider);
        const contract = new ethers.Contract(MYST_CONTRACT, [
            "function transfer(address to, uint256 amount) public returns (bool)",
            "function balanceOf(address owner) view returns (uint256)"
        ], wallet);

        // Ki·ªÉm tra s·ªë d∆∞ MYST c·ªßa v√≠
        const balance = await contract.balanceOf(wallet.address);
        console.log(`üìå S·ªë d∆∞ MYST: ${ethers.formatUnits(balance, 18)}`);

        if (balance < ethers.parseUnits(amount.toString(), 18)) {
            console.log("‚ö† Kh√¥ng ƒë·ªß MYST ƒë·ªÉ g·ª≠i!");
            return;
        }

        // L·∫•y ph√≠ gas ƒë·ªông
        const { maxFeePerGas, maxPriorityFeePerGas } = await getGasFees(provider);

        // G·ª≠i MYST
        const tx = await contract.transfer(toAddress, ethers.parseUnits(amount.toString(), 18), {
            maxFeePerGas,
            maxPriorityFeePerGas,
        });

        console.log(`‚è≥ ƒêang g·ª≠i ${amount} MYST t·ªõi ${toAddress}...`);
        console.log(`üìù Tx Hash: ${tx.hash}`);

        await tx.wait();
        console.log(`‚úÖ Giao d·ªãch ho√†n t·∫•t! Hash: ${tx.hash}`);
    } catch (error) {
        console.error("‚ùå L·ªói:", error);
    }
}

// Nh·∫≠n ƒë·ªãa ch·ªâ v√≠ v√† s·ªë l∆∞·ª£ng MYST t·ª´ command line
const args = process.argv.slice(2);
if (args.length < 2) {
    console.log("Thi·∫øu tham s·ªë. C√∫ ph√°p: node script.js <v√≠> <s·ªë l∆∞·ª£ng>");
    process.exit(1);
}

const recipient = args[0];
const amountToSend = parseFloat(args[1]);

sendMyst(recipient, amountToSend);
