require("dotenv").config();
const { ethers } = require("ethers");

// L·∫•y th√¥ng tin t·ª´ .env
const INFURA_URL = process.env.INFURA_URL;
const MYST_CONTRACT = "0x1379E8886A944d2D9d440b3d88DF536Aea08d9F3";
const PRIVATE_KEY = process.env.PRIVATE_KEY;

// K·∫øt n·ªëi v·ªõi m·∫°ng Polygon qua Infura
const provider = new ethers.JsonRpcProvider(INFURA_URL);
const wallet = new ethers.Wallet(PRIVATE_KEY, provider);

// ABI c·ªßa h·ª£p ƒë·ªìng MYST
const MYST_ABI = [
    "function transfer(address to, uint256 amount) public returns (bool)",
    "function balanceOf(address owner) view returns (uint256)",
];

// H√†m l·∫•y gi√° gas ƒë·ªông t·ª´ m·∫°ng
async function getGasFees() {
    const feeData = await provider.getFeeData();
    
    // Ki·ªÉm tra n·∫øu gasPrice b·ªã null
    let baseFee = feeData.gasPrice;
    if (!baseFee) {
        console.warn("‚ö† Kh√¥ng l·∫•y ƒë∆∞·ª£c gi√° gas t·ª´ m·∫°ng, ƒë·∫∑t m·∫∑c ƒë·ªãnh 50 Gwei.");
        baseFee = ethers.parseUnits("50", "gwei"); // Fallback 50 Gwei
    }

    baseFee = ethers.toBigInt(baseFee); // Chuy·ªÉn th√†nh BigInt

    // T√≠nh to√°n ph√≠ gas ƒë·ªÉ ∆∞u ti√™n giao d·ªãch
    const maxFeePerGas = baseFee * BigInt(2); // ƒê·∫∑t cao h∆°n g·∫•p ƒë√¥i
    const maxPriorityFeePerGas = baseFee * BigInt(3) / BigInt(2); // ∆Øu ti√™n cho th·ª£ ƒë√†o

    console.log(`‚õΩ Gi√° gas hi·ªán t·∫°i: ${ethers.formatUnits(baseFee, "gwei")} Gwei`);
    console.log(`üöÄ Max Fee Per Gas: ${ethers.formatUnits(maxFeePerGas, "gwei")} Gwei`);
    console.log(`üî• Max Priority Fee Per Gas: ${ethers.formatUnits(maxPriorityFeePerGas, "gwei")} Gwei`);

    return { maxFeePerGas, maxPriorityFeePerGas };
}

// H√†m g·ª≠i MYST
async function sendMyst(toAddress, amount) {
    try {
        const contract = new ethers.Contract(MYST_CONTRACT, MYST_ABI, wallet);

        // Ki·ªÉm tra s·ªë d∆∞ MYST c·ªßa v√≠
        const balance = await contract.balanceOf(wallet.address);
        console.log(`üìå S·ªë d∆∞ MYST: ${ethers.formatUnits(balance, 18)}`);

        if (balance < ethers.parseUnits(amount.toString(), 18)) {
            console.log("‚ö† Kh√¥ng ƒë·ªß MYST ƒë·ªÉ g·ª≠i!");
            return;
        }

        // L·∫•y ph√≠ gas ƒë·ªông
        const { maxFeePerGas, maxPriorityFeePerGas } = await getGasFees();

        // G·ª≠i MYST v·ªõi ph√≠ gas t·ªëi ∆∞u
        const tx = await contract.transfer(toAddress, ethers.parseUnits(amount.toString(), 18), {
            maxFeePerGas,
            maxPriorityFeePerGas,
        });

        console.log(`‚è≥ ƒêang g·ª≠i ${amount} MYST t·ªõi ${toAddress}...`);
        console.log(`üìù Tx Hash: ${tx.hash}`);

        // Ch·ªù x√°c nh·∫≠n giao d·ªãch
        await tx.wait();
        console.log(`‚úÖ Giao d·ªãch ho√†n t·∫•t! Hash: ${tx.hash}`);
    } catch (error) {
        console.error("‚ùå L·ªói:", error);
    }
}

// Nh·∫≠n ƒë·ªãa ch·ªâ v√≠ v√† s·ªë l∆∞·ª£ng MYST t·ª´ command line
const args = process.argv.slice(2);
if (args.length < 2) {
    console.log("Thi·∫øu tham s·ªë. C√∫ ph√°p: node metamask_auto_send.js <v√≠> <s·ªë l∆∞·ª£ng>");
    process.exit(1);
}

const recipient = args[0];
const amountToSend = parseFloat(args[1]);

sendMyst(recipient, amountToSend);
